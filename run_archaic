#!/bin/bash

# Print commands:
set -x

# Abort if any required binary is not found:
./check_reqs || { echo "Requirements unmet. Aborting."; exit 1; }

# Every "dangerous" line should start with $debug,
# so you can run it in "dry-mode" to test consistency.
# After feeling courageous enough, uncomment the second next line:
# debug="echo"
debug=

loadkeys la-latin1

### Carefully edit these variables: ###
HOSTNAME=golondrina
# Device in which installation will take place:
DEVICE=/dev/sda
# Already existing EFI partition (e.g., made by a Windows install):
EFI=${DEVICE}1
# (to be created) Main Arch Linux LUKS+LVM partition:
LUKS_LVM=${DEVICE}2
# (to be created) Secondary (non-encrypted) Arch Linux partition:
SEC_ARCH=${DEVICE}3
###

# Ideally, you should not need to edit this variables:
# LVM Volume Group name:
VG_NAME=vg${HOSTNAME}
# Installation date, for naming backups:
TODAY=$(date +%Y.%m.%d.%H.%M.%S)

# Location of the script to be run inside Arch chroot:
INSIDE_SCRIPT=_inside_arch_chroot

# Packages to be installed with pacstrap to both systems:
PKGS="base linux-firmware iw wpa_supplicant dialog refind terminus-font vim etckeeper xdelta3 bash-completion openssh htop sudo hddtemp avahi nss-mdns acpi bluez bluez-utils most unzip smartmontools dhcpcd man-db man-pages texinfo lvm2 cryptsetup e2fsprogs pciutils usbutils"

# Make CTRL+C interrupt whole script:
trap "exit 1" INT
# Stop script if any command fails:
set -e

### Interactive partition creation ###
# TODO: automate this:
PARTITIONS_READY=no
while [ $PARTITIONS_READY = "no" ]
do
    $debug cfdisk $DEVICE
    $debug partprobe
    echo "This is the output of fdisk -l $DEVICE:"
    fdisk -l $DEVICE
    echo
    echo "$EFI must be where EFI will be set."
    echo "$LUKS_LVM must be where LUKS+LVM for Main Arch Linux will be set."
    echo "$SEC_ARCH must be where Secondary Arch Linux will be installed."
    echo
    read -p "Is this correct? [yes/no]: " PARTITIONS_READY
done

# Format efi partition
$debug mkfs.fat -F 32 $EFI

# Sets LUKS:
$debug cryptsetup luksFormat --type luks2 $LUKS_LVM
$debug cryptsetup open $LUKS_LVM cryptlvm

# Set LVM Physical Volume on top of LUKS:
$debug pvcreate /dev/mapper/cryptlvm
$debug vgcreate $VG_NAME /dev/mapper/cryptlvm

# Create main Arch Linux Logical Volumes:
$debug lvcreate -L  2GiB $VG_NAME -n root
$debug lvcreate -L 30GiB $VG_NAME -n usr
$debug lvcreate -L 50GiB $VG_NAME -n var
$debug lvcreate -L 150GiB $VG_NAME -n home
$debug lvcreate -L 50GiB $VG_NAME -n bkp

# Format those volumes:
$debug mkfs.ext4 /dev/${VG_NAME}/root
$debug mkfs.ext4 /dev/${VG_NAME}/usr
$debug mkfs.ext4 /dev/${VG_NAME}/var
$debug mkfs.ext4 /dev/${VG_NAME}/home
$debug mkfs.ext4 /dev/${VG_NAME}/bkp

# Prepare mount points for arch-chroot:
$debug mount /dev/${VG_NAME}/root /mnt
$debug mkdir -p /mnt/boot
$debug mkdir -p /mnt/usr
$debug mkdir -p /mnt/var
$debug mkdir -p /mnt/home
$debug mount /dev/${VG_NAME}/usr /mnt/usr
$debug mount /dev/${VG_NAME}/var /mnt/var
$debug mount /dev/${VG_NAME}/home /mnt/home
$debug mount $EFI /mnt/boot

# Don't put "" around $PKGS; it should expand with its spaces.
$debug pacstrap -K /mnt linux $PKGS
$debug bash -c "genfstab -U /mnt >> /mnt/etc/fstab"

# CACHE
PKG_CACHE=/tmp/pkg_cache
$debug mkdir -p $PKG_CACHE
$debug rsync -av /mnt/var/cache/pacman/pkg/ $PKG_CACHE
$debug rsync -av $PKG_CACHE/ /mnt/var/cache/pacman/pkg

echo "MAIN ARCH LINUX INSTALLATION"

$debug cp $INSIDE_SCRIPT /mnt/root/
$debug cp -r configs /mnt/root/
$debug cp xorg_pkgs /mnt/root/
$debug arch-chroot /mnt /root/$INSIDE_SCRIPT $HOSTNAME linux
$debug rm /mnt/root/$INSIDE_SCRIPT
$debug umount -R /mnt

### Secondary Arch ###
$debug mkfs.ext4 $SEC_ARCH

$debug mount $SEC_ARCH /mnt
$debug mkdir -p /mnt/boot
$debug mount $EFI /mnt/boot
$debug mkdir -p /mnt/var/cache/pacman/pkg/
$debug rsync -av $PKG_CACHE/ /mnt/var/cache/pacman/pkg
# Secondary Arch will use linux-lts kernel to be able to share /boot partition
# Don't put "" around $PKGS; it should expand with its spaces.
$debug pacstrap -K /mnt linux-lts $PKGS
$debug bash -c "genfstab -U /mnt >> /mnt/etc/fstab"

echo "SECONDARY ARCH LINUX INSTALLATION"

$debug cp $INSIDE_SCRIPT /mnt/root
$debug cp -r configs /mnt/root/
# Secondary Arch hostname will be 'vaultos' for Vault OS.
$debug arch-chroot /mnt /root/$INSIDE_SCRIPT vaultos linux-lts $debug
$debug rm /mnt/root/$INSIDE_SCRIPT

### REFIND ###
$debug arch-chroot /mnt refind-install
REFIND_CONF=/mnt/boot/EFI/refind/refind.conf
$debug sed 's/^\(timeout.*\)/timeout 3/' -i "$REFIND_CONF"
$debug sed '$ a\resolution 1920 1080'    -i "$REFIND_CONF"

$debug rm /mnt/boot/refind_linux.conf

LUKS_LVM_UUID=$(blkid -o export $LUKS_LVM | awk '/^UUID/' | cut -d= -f2)
SEC_ARCH_UUID=$(blkid -o export $SEC_ARCH | awk '/^UUID/' | cut -d= -f2)
BOOT_UUID=$(blkid -o export $EFI | awk '/^UUID/' | cut -d= -f2)

TMP_STANZA=/tmp/refind_stanza

$debug cp refind_stanza "$TMP_STANZA"

$debug sed "/.*WC_BOOT_UUID.*/ s/WC_BOOT_UUID/$BOOT_UUID/g"             -i "$TMP_STANZA"
$debug sed "/.*WC_LUKS_LVM_UUID.*/ s/WC_LUKS_LVM_UUID/$LUKS_LVM_UUID/g" -i "$TMP_STANZA"
$debug sed "/.*WC_VG_NAME.*/ s/WC_VG_NAME/$VG_NAME/g"                   -i "$TMP_STANZA"
$debug sed "/.*WC_SEC_ARCH_UUID.*/ s/WC_SEC_ARCH_UUID/$SEC_ARCH_UUID/g" -i "$TMP_STANZA"

$debug bash -c "cat $TMP_STANZA >> $REFIND_CONF "

$debug umount -R /mnt

echo "Cross fingers, reboot and if anybody asks: we never met."
echo "Reboot when ready."
